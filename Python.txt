Data types in python

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
None Type:	NoneType

Strings in python are surrounded by either single quotation marks, or double quotation marks.

'hello' is the same as "hello".

Lists are used to store multiple items in a single variable
it can store different data types.
Lists are created using square brackets:
listname.append() appends a element at the end of the list
listname.extend(anotherlist) will add anotherlist to listname list
lists are indexed and ordered in the way the elements were added

To print the index of an element in a Python array (or list), you can use the index() method.


Tuple
Tuples are used to store multiple items in a single variable.
A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.

Tuple items are ordered, unchangeable, and allow duplicate values.Lists also allow duplicate values.

Ordered
When we say that tuples are ordered, it means that the items have a defined order, and that order will 
not change.

Unchangeable
Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been
 created.

The order is based on the order in which the elements were added in a tuple

Since tuples are indexed, they can have items with the same value:

To create a tuple with only one item, you have to add a comma after the item, otherwise Python will
 not recognize it as a tuple.

If a data structure is unindexed then it doesn't contain duplicate values

Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.
*Set items are unchangeable, but you can remove and/or add items whenever you like.

**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

Change Tuple Values
Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.

But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.

Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:

A tuple is defined by the presence of a comma, not just parentheses. Without a comma,Python interprets 
the expression inside the parentheses as a regular expression or value, not as a tuple. For example, (5)
is just the integer 5, not a tuple. To create a single-element tuple, you need to add a comma: (5,).

Unpacking a Tuple
When we create a tuple, we normally assign values to it. This is called "packing" a tuple:

But, in Python, we are also allowed to extract the values back into variables. 
This is called "unpacking":

thistuple = ("apple", "banana", "cherry")
(apple,banana,cherry)=thistuple

print(cherry)


Note: The number of variables must match the number of values in the tuple, if not, you must use an 
asterisk to collect the remaining values as a list.

Using Asterisk*
If the number of variables is less than the number of values, you can add an * to the variable name and
the values will be assigned to the variable as a list:

thistuple = ("apple", "banana", "cherry","watermelon","papaya")
(apple,banana,*remainingFruits)=thistuple 
print(remainingFruits) -> ['cherry', 'watermelon','papaya]

If the asterisk is added to another variable name than the last, Python will assign values to the
variable until the number of values left matches the number of variables left.
thistuple = ("apple", "banana", "cherry","watermelon","papaya")
(apple,*remainingFruits,papaya)=thistuple

print(remainingFruits) -> ['banana', 'cherry', 'watermelon']

Set
Sets are used to store multiple items in a single variable.

A set is a collection which is unordered, unchangeable*, and unindexed.

* Note: Set items are unchangeable, but you can remove items and add new items.
when we say that set items are "unchangeable," it means that the individual elements within a set
cannot be modified directly.

Unordered
Unordered means that the items in a set do not have a defined order.

Set items can appear in a different order every time you use them, and cannot be referred to by
index or key.

Note: The values True and 1 are considered the same value in sets, and are treated as duplicates:

thisset = {"apple", "banana", "cherry", True, 1, 2}

print(thisset) prints apple,banana,cherry,True,2 because True and 1 both are considered as 1

similarly the values False and zero are considered the same

Use of constructor

It is also possible to use the set() constructor to make a set.
It is also possible to use the list() constructor to make a list.
It is also possible to use the tuple() constructor to make a tuple.

myset=set({1,2,3,4})
mynewlist=list([2,3,4,'a'])
mynewtuple=tuple((1,))
print(myset,mynewlist,mynewtuple)

In python,to print multiple values at the same time,we use ',' a comma.

Reassignment: When you reassign a variable to a new value, Python creates a new object in memory to 
hold that value. The variable then points to this new object. The old object that the variable was 
pointing to may become eligible for garbage collection if there are no other references to it.

mySet={1,2,3,4}
myList=[5,6,7,8]
mySet.update(myList) -> 1,2,3,4,5,6,7,8 ->ordering can vary because set is unordered

Add Any Iterable
The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).
thisset = {"apple", "banana", "cherry"}
mylist = ["kiwi", "orange"]

thisset.update(mylist)

print(thisset)

to add items in a set 
thisset.add("banana")

in a list we use
thislist.append("banana")

in a ordered collection we use append and in a unordered collection we use add
but in tuple we should convert to a list and then modify a list and then re convert it to a tuple

Add Sets
To add items from another set into the current set, use the update() method.

Remove Item
To remove an item in a set, use the remove(), or the discard() method.

You can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed.

The return value of the pop() method is the removed item.

Union
The union() method returns a new set with all items from both sets.

set1 = {"a", "b", "c"}
set2 = {1, 2, 3}

set3 = set1.union(set2)
print(set3)

You can use the | operator instead of the union() method, and you will get the same result.

set1 = {"a", "b", "c"}
set2 = {1, 2, 3}

set3 = set1 | set2
print(set3)

The union() method allows you to join a set with other data types, like lists or tuples.

Note: The  | operator only allows you to join sets with sets, and not with other data types like you can with the  union() method.

in union,it returns a new set.

but if we use update() method to put items in set1 into set2 then it does not return a new set.

Intersection
Keep ONLY the duplicates

The intersection() method will return a new set, that only contains the items that are present in both sets.

set1={"apple","banana","cherry"}
set2={"apple","watermelon","jackfruit"}

set3=set1.intersection(set2)

print(set3)

You can use the & operator instead of the intersection() method, and you will get the same result.

The intersection_update() method will also keep ONLY the duplicates, but it will change the original set instead of returning a new set.

set1.intersection_update(set2)

The difference() method will return a new set that will contain only the items from the first set that
 are not present in the other set.
Keep all items from set1 that are not in set2:

You can use the - operator instead of the difference() method, and you will get the same result.

Note: The - operator only allows you to join sets with sets, and not with other data types like you can with the difference() method.

The difference_update() method will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set.


he symmetric_difference() method will keep only the elements that are NOT present in both sets.Uncommon
elements.

You can use the ^ operator instead of the symmetric_difference() method, and you will get the same result.

there are three methods wich modify the same set instead of returning a new set:
symmetric_difference_update() ,intersection_update(),difference_update()


Dictionary
Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are
unordered.

Duplicates Not Allowed
Dictionaries cannot have two items with the same key:

Dictionary Items - Data Types
The values in dictionary items can be of any data type:

to access a key use below

print(dict["key"])

There is also a method called get() that will give you the same result:

Example
Get the value of the "model" key:

x = thisdict.get("model")

The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list.

x=mydict.keys() returns all the keys in the dictionary

x=mydict.values() returns all the values in the dictionary

you can represent a empty value to a key by assigning the value to None

The items() method will return each item in a dictionary, as tuples in a list.
items() will return a list of tuples with key value pairs

Update Dictionary
The update() method will update the dictionary with the items from the given argument.

The argument must be a dictionary, or an iterable object with key:value pairs.

The pop(key) method removes the item with the specified key name:

The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):

The del keyword removes the item with the specified key name:
del thisdict["model"]

Copy a Dictionary
using copy() method


Nested Dictionaries

myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}

to loop through a nested loop we use below code

mydict={ "name" : "Emil","year" : 2004}
for x in mydict:
    print(x,mydict[x])
for x,obj in myfamily.items():
    print(x)

    for y in obj:
        print(y+':',obj[y])

where y is key and obj[y] is value

a = {'name' : 'John', 'age' : '20'}
b = {'name' : 'May', 'age' : '23'}
customers = {'c1' : a, 'c2' : b}

we can also store value as a dict


loops
The continue Statement
With the continue statement we can stop the current iteration, and continue with the next:

The break Statement
With the break statement we can stop the loop even if the while condition is true:


if condition cannot be empty
we can write pass keyword to pass the condition

Arbitrary Arguments, *args
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.

This way the function will receive a tuple of arguments, and can access the items accordingly

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")
here indexing starts from 0


Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.

This way the function will receive a dictionary of arguments, and can access the items accordingly:

def my_function(**kwargs):
  for key,value in kwargs.items():
      print(f"{key}={value}")

my_function(name="Alice",age=30, location="jersey")

here f is f-string formatting introduced in python 3.6

Default Parameter Value

If we call the function without argument, it uses the default value:

def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")


The pass Statement
function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.

Positional arguements and Keyword arguements

Positional arguements are passed to a function based on the order in which they are listed in an arguement

Keyword arguements are passed to a function by explicitly naming the parameter and providing a value.
The arguements are matched with the parameters by their name and not their position.

You can specify that a function can have ONLY positional arguments, or ONLY keyword arguments.

To specify that a function can have only positional arguments, add , / after the arguments:

Example
def my_function(x, /):
  print(x)

my_function(3)

the above code will work but it will give error for below code
def my_function(x, /):
  print(x)

my_function(x = 3)

Keyword-Only Arguments
To specify that a function can have only keyword arguments, add *, before the arguments:
def my_function(*, x):
  print(x)

my_function(x = 3)

Combine Positional-Only and Keyword-Only
You can combine the two argument types in the same function.

Any argument before the / , are positional-only, and any argument after the *, are keyword-only.

Example
def my_function(a, b, /, *, c, d):
  print(a + b + c + d)

my_function(5, 6, c = 7, d = 8)

Python Lambda
A lambda function is a small anonymous function.

A lambda function can take any number of arguments, but can only have one expression.

by small it means lambda function is a short hand form of a normal function and it is inline
by anonymous it means the lambda function does not have a name though it has to be assigned to a variable

Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:

def myfunc(n):
  return lambda a : a * n

use the same function definition to make both functions, in the same program:

def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)
mytripler = myfunc(3)

print(mydoubler(11))
print(mytripler(11))

in the above code lambda funcvtion are used to create closure.A closure occurs wheb a function(in this case,lambda) "remembers" the environment in which it was created,even after the outer function has finished executing.

1.The myfunc function:-
-it takes single arguement n.
-inside myfunc a lambda function is created a:a*n
-This lambda function takes parameter a and multiplies it by the value of n from the enclosing scope.
The lambda function is returned by myfn,but its not immediately executed.Instead it is returned as a callable function that can be used later

2.CLosure concept:-
when myfunc(2) is called,it returns a lambda function where n=2;
This lambda function remembers that n was set to 2 in the environment when myfunc(2) was called.Therefore whenever mydoubler(2) is called it multiplies 11 by 2.

3.Order of arguments
Argument a is provided when you call the lambda function
The value n is set when the lambda function is created.in this case of mydoubler,n=2 was passed to myfunc() when mydoubler() was created,and this value is remembered by the lambda.

so to narrow it down mydoubler and mytripler stores a lambda function which is returned by the myfunc() function

Python Arrays
Python does not have built-in support for Arrays, but Python Lists can be used instead.
This page shows you how to use LISTS as ARRAYS, however, to work with arrays in Python you will have to import a library, like the NumPy library.

Python does not have built-in support for Arrays, but Python Lists can be used instead.


Python Classes/Objects
Python is an object oriented programming language.

Almost everything in Python is an object, with its properties and methods.

A Class is like an object constructor, or a "blueprint" for creating objects.

class MyClass:
  x = 5

p1 = MyClass()
print(p1.x)

All classes have a function called __init__(), which is always executed when the class is being initiated.

Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)

The __init__() function is called automatically every time the class is being used to create a new object.

The __str__() function controls what should be returned when the class object is represented as a string.

If the __str__() function is not set, the string representation of the object is returned:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1)-----><__main__.Person object at 0x7c5b41077110>


we have to manually print p1.name and p1.age.

the __str__() function is quite similar to tostring() method in java.Both are used to provide a human readable string representation of an object.

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"

p1 = Person("John", 36)

print(p1) ----->

Object Methods
Objects can also contain methods. Methods in objects are functions that belong to the object.

Let us create a method in the Person class:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"
  def printName(self):
      return f"Hello {self.name}"

p1 = Person("John", 36)

print(p1.printName())

Note: The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.


The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.

It does not have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class:

You can modify properties on objects like this:
p1.age = 40

Delete Object Properties
You can delete properties on objects by using the del keyword:
del p1.age

Delete Objects
You can delete objects by using the del keyword:

Python Inheritance
Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = 100

  def __str__(self):
    return f"{self.name}({self.age})"
  def printName(self):
      return f"Hello {self.name}"
      
class Student(Person):
    pass

s1=Student("Peter",22)

print(s1)

Add the __init__() function to the Student class:

class Student(Person):
  def __init__(self, fname, lname):
    #add properties etc.
When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.

Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.

To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:

Python also has a super() function that will make the child class inherit all the methods and properties from its parent:

Example
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Mike", "Olsen", 2019)

in the above code grauationYear is a instance attribute similar to fname,lname
though fname and lname are present in the init function of parent as well as childs ,if we use self.graduationYear,it becomes a new instance attribute

Add Methods

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)

If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.

Python Iterators
An iterator is an object that contains a countable number of values.

An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.

Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().

Iterator vs Iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.

All these objects have a iter() method which is used to get an iterator:

mytuple=("apple","banana","cherry")
myit=iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

Even strings are iterable objects, and can return an iterator:

We can create our own iterator
class MyNumbers():
    def __iter__(self):
        self.a=0
        return self
    def __next__(self):
        self.a+=1
        return self.a
        
myobj=MyNumbers()
myit=iter(myobj)
print(next(myit))
print(next(myit))
print(next(myit))

StopIteration
The example above would continue forever if you had enough next() statements, or if it was used in a for loop.

To prevent the iteration from going on forever, we can use the StopIteration statement.

In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:

The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.

Function Polymorphism
An example of a Python function that can be used on different objects is the len() function.
can be used on list,tuple,string,dict,set

Class Polymorphism
Polymorphism is often used in Class methods, where we can have multiple classes with the same method name.

For example, say we have three classes: Car, Boat, and Plane, and they all have a method called move():

Inheritance Class Polymorphism
What about classes with child classes with the same name? Can we use polymorphism there?

Yes. If we use the example above and make a parent class called Vehicle, and make Car, Boat, Plane child classes of Vehicle, the child classes inherits the Vehicle methods, but can override them:


Local Scope
A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.

Function Inside Function
As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function:

Global Scope
A variable created in the main body of the Python code is a global variable and belongs to the global scope.

Global variables are available from within any scope, global and local.


Naming Variables
If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, one available in the global scope (outside the function) and one available in the local scope (inside the function):


Global Keyword
If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.

The global keyword makes the variable global.

def myfunc():
  global x
  x = 300

myfunc()

print(x)

Also, use the global keyword if you want to make a change to a global variable inside a function.

x = 300

def myfunc():
  global x
  x = 200

myfunc()

print(x)

Nonlocal variables

def myfunc1():
  x = "Jane"
  def myfunc2():
    nonlocal x
    x = "hello"
  myfunc2()
  return x

print(myfunc1())->prints "hello"


basically pointing towards the variable "x" of the parent function

What is a Module?
Consider a module to be the same as a code library.

A file containing a set of functions you want to include in your application.

Save this code in a file named mymodule.py

def greeting(name):
  print("Hello, " + name)

Import the module named mymodule, and call the greeting function:

import mymodule

mymodule.greeting("raj")

Variables in Module
The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):
Save this code in the file mymodule.py

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

Import the module named mymodule, and access the person1 dictionary:

import mymodule

a = mymodule.person1["age"]
print(a)

Re-naming a Module
You can create an alias when you import a module, by using the as keyword:
Create an alias for mymodule called mx:

import mymodule as mx

a = mx.person1["age"]
print(a)


Import From Module
You can choose to import only parts from a module, by using the from keyword.

def greeting(name):
  print("Hello, " + name)

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

Import only the person1 dictionary from the module:

from mymodule import person1

print (person1["age"])

Python Dates
A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.

Date Output
When we execute the code from the example above the result will be:

import datetime

x = datetime.datetime.now()

print(x.year)
print(x.strftime("%A"))

2024-11-13 18:28:37.638833
The date contains year, month, day, hour, minute, second, and microsecond.

The datetime module has many methods to return information about the date object.

Creating Date Objects
To create a date, we can use the datetime() class (constructor) of the datetime module.

The datetime() class requires three parameters to create a date: year, month, day.

import datetime

x = datetime.datetime(2020, 5, 17)

print(x)

The strftime() Method
The datetime object has a method for formatting date objects into readable strings.

The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:


Built-in Math Functions
The min() and max() functions can be used to find the lowest or highest value in an iterable:

The abs() function returns the absolute (positive) value of the specified number:

Example
x = abs(-7.25)

print(x)

The pow(x, y) function returns the value of x to the power of y (xy).

Example
Return the value of 4 to the power of 3 (same as 4 * 4 * 4):

x = pow(4, 3)

print(x)

The Math Module
Python has also a built-in module called math, which extends the list of mathematical functions.

To use it, you must import the math module:

The math.sqrt() method for example, returns the square root of a number:

x=math.sqrt(81)

The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:

The math.pi constant, returns the value of PI (3.14...):


Python JSON
JSON is a syntax for storing and exchanging data.

JSON is text, written with JavaScript object notation.


Python has a built-in package called json, which can be used to work with JSON data.
import json

Convert from JSON to Python:

import json

# some JSON:
x =  '{ "name":"John", "age":30, "city":"New York"}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y["age"])

If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.
y = json.dumps(x)

When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:

Python	JSON
dict	Object
list	Array
tuple	Array
str	String
etc

Use the indent parameter to define the numbers of indents:

json.dumps(x, indent=4)


You can also define the separators, default value is (", ", ": "), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:

You can also define the separators, default value is (", ", ": "), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:

json.dumps(x, indent=4, separators=(". ", " = "))

# sort the result alphabetically by keys:
print(json.dumps(x, indent=4, sort_keys=True))


Python RegEx
A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.

RegEx can be used to check if a string contains the specified search pattern.


Python provides regular expression(regex) support through re module,which allows you to match,search and manipulate strings using matching pattern

The findall() function returns a list containing all matches.
#Return a list containing every occurrence of "ai":

txt = "The rain in Spain was main"
x = re.findall("ai", txt)
print(x)

The search() function searches the string for a match, and returns a Match object if there is a match.

If there is more than one match, only the first occurrence of the match will be returned:

import re

txt = "The rain rain in Spain"
x = re.search("rain", txt)

print("The first 'rain' is located in position:", x.start()) 

The split() Function
The split() function returns a list where the string has been split at each match:


import re

#Split the string at every white-space character:

txt = "The rain in Spain"
x = re.split("\s", txt)
print(x)

You can control the number of occurrences by specifying the maxsplit parameter:

The sub() function replaces the matches with the text of your choice:

Example
Replace every white-space character with the number 9:

You can control the number of replacements by specifying the count parameter:

import re

txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)


Match Object
A Match Object is an object containing information about the search and the result.

he Match object has properties and methods used to retrieve information about the search, and the result:

.span() returns a tuple containing the start-, and end positions of the match.
txt = "The rain in Spain"
x = re.search("rain",txt)
print(x.span())
.string returns the string passed into the function
txt = "The rain in Spain"
x = re.search("rain",txt)
print(x.string)
.group() returns the part of the string where there was a match
txt = "The rain in Spain"
x = re.search("ai",txt)
print(x.group())


What is PIP?
PIP is a package manager for Python packages, or modules if you like.

What is a Package?
A package contains all the files you need for a module.

Modules are Python code libraries you can include in your project.


Python Try Except
The try block lets you test a block of code for errors.

The except block lets you handle the error.

The else block lets you execute code when there is no error.

The finally block lets you execute code, regardless of the result of the try- and except blocks.

Exception Handling
When an error occurs, or exception as we call it, Python will normally stop and generate an error message.

These exceptions can be handled using the try statement:

Print one message if the try block raises a NameError and another for other errors:

try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")

Else
You can use the else keyword to define a block of code to be executed if no errors were raised:

try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

Finally
The finally block, if specified, will be executed regardless if the try block raises an error or not.


try:
  def fn():
     global x
     x=10
     print(x)
  fn()
except:
  print("An exception occurred")
else:
    print("nothing went wrong")
finally:
    print("completed executing try except block")


as a Python developer you can choose to throw an exception if a condition occurs.

To throw (or raise) an exception, use the raise keyword.

Example
Raise an error and stop the program if x is lower than 0:

x = -1

if x < 0:
  raise Exception("Sorry, no numbers below zero")

Raise a TypeError if x is not an integer:

x = "hello"

if not type(x) is int:
  raise TypeError("Only integers are allowed"


User input in python
Python allows for user input.

That means we are able to ask the user for input.

The method is a bit different in Python 3.6 than Python 2.7.

Python 3.6 uses the input() method.

Python 2.7 uses the raw_input() method.

Python 3.6
username = input("Enter username:")
print("Username is: " + username)

Python 2.7
username = raw_input("Enter username:")
print("Username is: " + username)

String format()
Before Python 3.6 we used the format() method to format strings.

Python File Open
Python has several functions for creating, reading, updating, and deleting files.

File Handling
The key function for working with files in Python is the open() function.

The open() function takes two parameters; filename, and mode.

There are four different methods (modes) for opening a file:

"r" - Read - Default value. Opens a file for reading, error if the file does not exist

"a" - Append - Opens a file for appending, creates the file if it does not exist

"w" - Write - Opens a file for writing, creates the file if it does not exist

"x" - Create - Creates the specified file, returns an error if the file exists

In addition you can specify if the file should be handled as binary or text mode

"t" - Text - Default value. Text mode

"b" - Binary - Binary mode (e.g. images)

To open are read the file we use 
f = open("demofile.txt", "r")
print(f.read())

Read two lines of the file:

f = open("demofile.txt", "r")
print(f.readline())
print(f.readline())

To iterate through the text file line by line
f = open("textfile.txt")
  for x in f:
    print(x)


It is a good practice to always close the file when you are done with it.
f = open("demofile.txt", "r")
print(f.readline())
f.close()


Write to an Existing File
To write to an existing file, you must add a parameter to the open() function:

"a" - Append - will append to the end of the file

"w" - Write - will overwrite any existing content

try:
  f = open("textfile.txt","w")
  f.write("i overwritten the content")
  f.close()
  try:
    f=open("textfile.txt","r")
    print(f.read())
  except:
    print("cant read file after writing")
except:
  print("Something went wrong when opening the file")


Create a New File
To create a new file in Python, use the open() method, with one of the following parameters:

"x" - Create - will create a file, returns an error if the file exists

"a" - Append - will create a file if the specified file does not exists

"w" - Write - will create a file if the specified file does not exists

Delete a File
To delete a file, you must import the OS module, and run its os.remove() function:

import os

os.remove("filename")


Check if file exists, then delete it:

import os
if os.path.exists("demofile.txt"):
  os.remove("demofile.txt")
else:
  print("The file does not exist")

Delete Folder
To delete an entire folder, use the os.rmdir() method:
it is basically remove directory

To delete a folder it should not contain any files


